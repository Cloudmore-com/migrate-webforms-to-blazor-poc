@inherits LayoutComponentBase

<div class="page">
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-dark">
        <NavMenu />
    </nav>

    <div class="container body-content">
        @Body
        <hr />
        <footer>
            <p>&copy; 2024 - My ASP.NET Application</p>
            <span>
                UserInitialized: @sessionData.UserInitialized |
                SessionID: @sessionData.SessionID |
                VisitTime: @sessionData.VisitTime |
                BlazorString: @sessionData.BlazorString
            </span>
            <br />
            <p>
                Is Authenticated: @HttpContext?.User?.Identity?.IsAuthenticated <br />
                User Name: @HttpContext?.User?.Identity?.Name <br />
                User Claims: @string.Join(", ", HttpContext?.User?.Claims?.Select(c => c.Type + "=" + c.Value) ?? Array.Empty<string>()) <br />
            </p>
        </footer>
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private SessionData sessionData = new SessionData();

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override Task OnInitializedAsync()
    {
        if(HttpContext != null)
        {
            var webHttpContext = ((System.Web.HttpContext)HttpContext);
            if (webHttpContext != null && webHttpContext.Session != null)
            {
                sessionData.UserInitialized = (bool?)webHttpContext.Session["UserInitialized"] ?? false;
                sessionData.SessionID = (string?)webHttpContext.Session["SessionID"] ?? string.Empty;
                sessionData.VisitTime = (DateTime?)webHttpContext.Session["VisitTime"] ?? null;

                if (string.IsNullOrWhiteSpace(webHttpContext.Session["BlazorString"] as string))
                {
                    webHttpContext.Session["BlazorString"] = "Blazor string initialized at " + DateTime.Now.ToString("o");
                }

                sessionData.BlazorString = webHttpContext.Session["BlazorString"] as string ?? string.Empty;
            }   
        }

        return base.OnInitializedAsync();
    }
    private class SessionData
    {
        public bool UserInitialized { get; set; }
        public string SessionID { get; set; } = string.Empty;
        public DateTime? VisitTime { get; set; } = null;
        public string BlazorString { get; set; } = string.Empty;
    }
}
